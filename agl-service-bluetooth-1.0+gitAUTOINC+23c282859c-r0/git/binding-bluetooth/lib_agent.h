/*
 * Generated by gdbus-codegen 2.48.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LIB_AGENT_H__
#define __LIB_AGENT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Agent1 */

#define AGENT_TYPE_ORG_BLUEZ_AGENT1 (agent_org_bluez_agent1_get_type ())
#define AGENT_ORG_BLUEZ_AGENT1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1, AGENTOrgBluezAgent1))
#define AGENT_IS_ORG_BLUEZ_AGENT1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1))
#define AGENT_ORG_BLUEZ_AGENT1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1, AGENTOrgBluezAgent1Iface))

struct _AGENTOrgBluezAgent1;
typedef struct _AGENTOrgBluezAgent1 AGENTOrgBluezAgent1;
typedef struct _AGENTOrgBluezAgent1Iface AGENTOrgBluezAgent1Iface;

struct _AGENTOrgBluezAgent1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_authorize_service) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device,
    const gchar *arg_uuid);

  gboolean (*handle_cancel) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_display_passkey) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device,
    guint arg_passkey,
    guint16 arg_entered);

  gboolean (*handle_display_pin_code) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device,
    const gchar *arg_pincode);

  gboolean (*handle_release) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_authorization) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

  gboolean (*handle_request_confirmation) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device,
    guint arg_passkey);

  gboolean (*handle_request_passkey) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

  gboolean (*handle_request_pin_code) (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

};

GType agent_org_bluez_agent1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *agent_org_bluez_agent1_interface_info (void);
guint agent_org_bluez_agent1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void agent_org_bluez_agent1_complete_release (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void agent_org_bluez_agent1_complete_request_pin_code (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *pincode);

void agent_org_bluez_agent1_complete_display_pin_code (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void agent_org_bluez_agent1_complete_request_passkey (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation,
    guint passkey);

void agent_org_bluez_agent1_complete_display_passkey (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void agent_org_bluez_agent1_complete_request_confirmation (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void agent_org_bluez_agent1_complete_request_authorization (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void agent_org_bluez_agent1_complete_authorize_service (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);

void agent_org_bluez_agent1_complete_cancel (
    AGENTOrgBluezAgent1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void agent_org_bluez_agent1_call_release (
    AGENTOrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_release_finish (
    AGENTOrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_release_sync (
    AGENTOrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_request_pin_code (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_request_pin_code_finish (
    AGENTOrgBluezAgent1 *proxy,
    gchar **out_pincode,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_request_pin_code_sync (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    gchar **out_pincode,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_display_pin_code (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    const gchar *arg_pincode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_display_pin_code_finish (
    AGENTOrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_display_pin_code_sync (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    const gchar *arg_pincode,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_request_passkey (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_request_passkey_finish (
    AGENTOrgBluezAgent1 *proxy,
    guint *out_passkey,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_request_passkey_sync (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint *out_passkey,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_display_passkey (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    guint16 arg_entered,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_display_passkey_finish (
    AGENTOrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_display_passkey_sync (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    guint16 arg_entered,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_request_confirmation (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_request_confirmation_finish (
    AGENTOrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_request_confirmation_sync (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    guint arg_passkey,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_request_authorization (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_request_authorization_finish (
    AGENTOrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_request_authorization_sync (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_authorize_service (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_authorize_service_finish (
    AGENTOrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_authorize_service_sync (
    AGENTOrgBluezAgent1 *proxy,
    const gchar *arg_device,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GError **error);

void agent_org_bluez_agent1_call_cancel (
    AGENTOrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean agent_org_bluez_agent1_call_cancel_finish (
    AGENTOrgBluezAgent1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean agent_org_bluez_agent1_call_cancel_sync (
    AGENTOrgBluezAgent1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define AGENT_TYPE_ORG_BLUEZ_AGENT1_PROXY (agent_org_bluez_agent1_proxy_get_type ())
#define AGENT_ORG_BLUEZ_AGENT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1_PROXY, AGENTOrgBluezAgent1Proxy))
#define AGENT_ORG_BLUEZ_AGENT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AGENT_TYPE_ORG_BLUEZ_AGENT1_PROXY, AGENTOrgBluezAgent1ProxyClass))
#define AGENT_ORG_BLUEZ_AGENT1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1_PROXY, AGENTOrgBluezAgent1ProxyClass))
#define AGENT_IS_ORG_BLUEZ_AGENT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1_PROXY))
#define AGENT_IS_ORG_BLUEZ_AGENT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AGENT_TYPE_ORG_BLUEZ_AGENT1_PROXY))

typedef struct _AGENTOrgBluezAgent1Proxy AGENTOrgBluezAgent1Proxy;
typedef struct _AGENTOrgBluezAgent1ProxyClass AGENTOrgBluezAgent1ProxyClass;
typedef struct _AGENTOrgBluezAgent1ProxyPrivate AGENTOrgBluezAgent1ProxyPrivate;

struct _AGENTOrgBluezAgent1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AGENTOrgBluezAgent1ProxyPrivate *priv;
};

struct _AGENTOrgBluezAgent1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType agent_org_bluez_agent1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AGENTOrgBluezAgent1Proxy, g_object_unref)
#endif

void agent_org_bluez_agent1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AGENTOrgBluezAgent1 *agent_org_bluez_agent1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
AGENTOrgBluezAgent1 *agent_org_bluez_agent1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void agent_org_bluez_agent1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
AGENTOrgBluezAgent1 *agent_org_bluez_agent1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
AGENTOrgBluezAgent1 *agent_org_bluez_agent1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define AGENT_TYPE_ORG_BLUEZ_AGENT1_SKELETON (agent_org_bluez_agent1_skeleton_get_type ())
#define AGENT_ORG_BLUEZ_AGENT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1_SKELETON, AGENTOrgBluezAgent1Skeleton))
#define AGENT_ORG_BLUEZ_AGENT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), AGENT_TYPE_ORG_BLUEZ_AGENT1_SKELETON, AGENTOrgBluezAgent1SkeletonClass))
#define AGENT_ORG_BLUEZ_AGENT1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1_SKELETON, AGENTOrgBluezAgent1SkeletonClass))
#define AGENT_IS_ORG_BLUEZ_AGENT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), AGENT_TYPE_ORG_BLUEZ_AGENT1_SKELETON))
#define AGENT_IS_ORG_BLUEZ_AGENT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), AGENT_TYPE_ORG_BLUEZ_AGENT1_SKELETON))

typedef struct _AGENTOrgBluezAgent1Skeleton AGENTOrgBluezAgent1Skeleton;
typedef struct _AGENTOrgBluezAgent1SkeletonClass AGENTOrgBluezAgent1SkeletonClass;
typedef struct _AGENTOrgBluezAgent1SkeletonPrivate AGENTOrgBluezAgent1SkeletonPrivate;

struct _AGENTOrgBluezAgent1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AGENTOrgBluezAgent1SkeletonPrivate *priv;
};

struct _AGENTOrgBluezAgent1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType agent_org_bluez_agent1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AGENTOrgBluezAgent1Skeleton, g_object_unref)
#endif

AGENTOrgBluezAgent1 *agent_org_bluez_agent1_skeleton_new (void);


G_END_DECLS

#endif /* __LIB_AGENT_H__ */
