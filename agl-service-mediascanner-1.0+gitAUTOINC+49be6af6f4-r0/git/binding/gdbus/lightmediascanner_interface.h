/*
 * Generated by gdbus-codegen 2.52.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LIGHTMEDIASCANNER_INTERFACE_H__
#define __LIGHTMEDIASCANNER_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (org_freedesktop_dbus_properties_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusProperties))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusPropertiesIface))

struct _OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusProperties OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusPropertiesIface OrgFreedesktopDBusPropertiesIface;

struct _OrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name);

  gboolean (*handle_get_all) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name);

  gboolean (*handle_set) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value);

  void (*properties_changed) (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_properties_interface_info (void);
guint org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_properties_complete_get (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void org_freedesktop_dbus_properties_complete_get_all (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void org_freedesktop_dbus_properties_complete_set (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_freedesktop_dbus_properties_emit_properties_changed (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void org_freedesktop_dbus_properties_call_get (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_get_all (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_all_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_all_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_set (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_set_finish (
    OrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_set_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (org_freedesktop_dbus_properties_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxy))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _OrgFreedesktopDBusPropertiesProxy OrgFreedesktopDBusPropertiesProxy;
typedef struct _OrgFreedesktopDBusPropertiesProxyClass OrgFreedesktopDBusPropertiesProxyClass;
typedef struct _OrgFreedesktopDBusPropertiesProxyPrivate OrgFreedesktopDBusPropertiesProxyPrivate;

struct _OrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (org_freedesktop_dbus_properties_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeleton))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _OrgFreedesktopDBusPropertiesSkeleton OrgFreedesktopDBusPropertiesSkeleton;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonClass OrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonPrivate OrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _OrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (org_freedesktop_dbus_introspectable_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, OrgFreedesktopDBusIntrospectable))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, OrgFreedesktopDBusIntrospectableIface))

struct _OrgFreedesktopDBusIntrospectable;
typedef struct _OrgFreedesktopDBusIntrospectable OrgFreedesktopDBusIntrospectable;
typedef struct _OrgFreedesktopDBusIntrospectableIface OrgFreedesktopDBusIntrospectableIface;

struct _OrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    OrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_introspectable_interface_info (void);
guint org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_introspectable_complete_introspect (
    OrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *xml_data);



/* D-Bus method calls: */
void org_freedesktop_dbus_introspectable_call_introspect (
    OrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_introspectable_call_introspect_finish (
    OrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml_data,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_introspectable_call_introspect_sync (
    OrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_xml_data,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (org_freedesktop_dbus_introspectable_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxy))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxyClass))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _OrgFreedesktopDBusIntrospectableProxy OrgFreedesktopDBusIntrospectableProxy;
typedef struct _OrgFreedesktopDBusIntrospectableProxyClass OrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _OrgFreedesktopDBusIntrospectableProxyPrivate OrgFreedesktopDBusIntrospectableProxyPrivate;

struct _OrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _OrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeleton))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _OrgFreedesktopDBusIntrospectableSkeleton OrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _OrgFreedesktopDBusIntrospectableSkeletonClass OrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _OrgFreedesktopDBusIntrospectableSkeletonPrivate OrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _OrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Peer */

#define TYPE_ORG_FREEDESKTOP_DBUS_PEER (org_freedesktop_dbus_peer_get_type ())
#define ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER, OrgFreedesktopDBusPeer))
#define IS_ORG_FREEDESKTOP_DBUS_PEER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER))
#define ORG_FREEDESKTOP_DBUS_PEER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER, OrgFreedesktopDBusPeerIface))

struct _OrgFreedesktopDBusPeer;
typedef struct _OrgFreedesktopDBusPeer OrgFreedesktopDBusPeer;
typedef struct _OrgFreedesktopDBusPeerIface OrgFreedesktopDBusPeerIface;

struct _OrgFreedesktopDBusPeerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_machine_id) (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_ping) (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

};

GType org_freedesktop_dbus_peer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_peer_interface_info (void);
guint org_freedesktop_dbus_peer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_peer_complete_ping (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_dbus_peer_complete_get_machine_id (
    OrgFreedesktopDBusPeer *object,
    GDBusMethodInvocation *invocation,
    const gchar *machine_uuid);



/* D-Bus method calls: */
void org_freedesktop_dbus_peer_call_ping (
    OrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_peer_call_ping_finish (
    OrgFreedesktopDBusPeer *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_peer_call_ping_sync (
    OrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_peer_call_get_machine_id (
    OrgFreedesktopDBusPeer *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_peer_call_get_machine_id_finish (
    OrgFreedesktopDBusPeer *proxy,
    gchar **out_machine_uuid,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_peer_call_get_machine_id_sync (
    OrgFreedesktopDBusPeer *proxy,
    gchar **out_machine_uuid,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY (org_freedesktop_dbus_peer_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, OrgFreedesktopDBusPeerProxy))
#define ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, OrgFreedesktopDBusPeerProxyClass))
#define ORG_FREEDESKTOP_DBUS_PEER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY, OrgFreedesktopDBusPeerProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_PROXY))

typedef struct _OrgFreedesktopDBusPeerProxy OrgFreedesktopDBusPeerProxy;
typedef struct _OrgFreedesktopDBusPeerProxyClass OrgFreedesktopDBusPeerProxyClass;
typedef struct _OrgFreedesktopDBusPeerProxyPrivate OrgFreedesktopDBusPeerProxyPrivate;

struct _OrgFreedesktopDBusPeerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusPeerProxyPrivate *priv;
};

struct _OrgFreedesktopDBusPeerProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_peer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPeerProxy, g_object_unref)
#endif

void org_freedesktop_dbus_peer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_peer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON (org_freedesktop_dbus_peer_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, OrgFreedesktopDBusPeerSkeleton))
#define ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, OrgFreedesktopDBusPeerSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_PEER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON, OrgFreedesktopDBusPeerSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_PEER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PEER_SKELETON))

typedef struct _OrgFreedesktopDBusPeerSkeleton OrgFreedesktopDBusPeerSkeleton;
typedef struct _OrgFreedesktopDBusPeerSkeletonClass OrgFreedesktopDBusPeerSkeletonClass;
typedef struct _OrgFreedesktopDBusPeerSkeletonPrivate OrgFreedesktopDBusPeerSkeletonPrivate;

struct _OrgFreedesktopDBusPeerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusPeerSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusPeerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_peer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPeerSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusPeer *org_freedesktop_dbus_peer_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.lightmediascanner.Scanner1 */

#define TYPE_SCANNER1 (scanner1_get_type ())
#define SCANNER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SCANNER1, Scanner1))
#define IS_SCANNER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SCANNER1))
#define SCANNER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_SCANNER1, Scanner1Iface))

struct _Scanner1;
typedef struct _Scanner1 Scanner1;
typedef struct _Scanner1Iface Scanner1Iface;

struct _Scanner1Iface
{
  GTypeInterface parent_iface;



  gboolean (*handle_release_write_lock) (
    Scanner1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_write_lock) (
    Scanner1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_scan) (
    Scanner1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_specification);

  gboolean (*handle_stop) (
    Scanner1 *object,
    GDBusMethodInvocation *invocation);

  GVariant * (*get_categories) (Scanner1 *object);

  const gchar * (*get_data_base_path) (Scanner1 *object);

  gboolean  (*get_is_scanning) (Scanner1 *object);

  guint64  (*get_update_id) (Scanner1 *object);

  gboolean  (*get_write_locked) (Scanner1 *object);

  void (*scan_progress) (
    Scanner1 *object,
    const gchar *arg_Category,
    const gchar *arg_Path,
    guint64 arg_UpToDate,
    guint64 arg_Processed,
    guint64 arg_Deleted,
    guint64 arg_Skipped,
    guint64 arg_Errors);

};

GType scanner1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *scanner1_interface_info (void);
guint scanner1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void scanner1_complete_scan (
    Scanner1 *object,
    GDBusMethodInvocation *invocation);

void scanner1_complete_stop (
    Scanner1 *object,
    GDBusMethodInvocation *invocation);

void scanner1_complete_request_write_lock (
    Scanner1 *object,
    GDBusMethodInvocation *invocation);

void scanner1_complete_release_write_lock (
    Scanner1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void scanner1_emit_scan_progress (
    Scanner1 *object,
    const gchar *arg_Category,
    const gchar *arg_Path,
    guint64 arg_UpToDate,
    guint64 arg_Processed,
    guint64 arg_Deleted,
    guint64 arg_Skipped,
    guint64 arg_Errors);



/* D-Bus method calls: */
void scanner1_call_scan (
    Scanner1 *proxy,
    GVariant *arg_specification,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean scanner1_call_scan_finish (
    Scanner1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean scanner1_call_scan_sync (
    Scanner1 *proxy,
    GVariant *arg_specification,
    GCancellable *cancellable,
    GError **error);

void scanner1_call_stop (
    Scanner1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean scanner1_call_stop_finish (
    Scanner1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean scanner1_call_stop_sync (
    Scanner1 *proxy,
    GCancellable *cancellable,
    GError **error);

void scanner1_call_request_write_lock (
    Scanner1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean scanner1_call_request_write_lock_finish (
    Scanner1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean scanner1_call_request_write_lock_sync (
    Scanner1 *proxy,
    GCancellable *cancellable,
    GError **error);

void scanner1_call_release_write_lock (
    Scanner1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean scanner1_call_release_write_lock_finish (
    Scanner1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean scanner1_call_release_write_lock_sync (
    Scanner1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *scanner1_get_data_base_path (Scanner1 *object);
gchar *scanner1_dup_data_base_path (Scanner1 *object);
void scanner1_set_data_base_path (Scanner1 *object, const gchar *value);

gboolean scanner1_get_is_scanning (Scanner1 *object);
void scanner1_set_is_scanning (Scanner1 *object, gboolean value);

gboolean scanner1_get_write_locked (Scanner1 *object);
void scanner1_set_write_locked (Scanner1 *object, gboolean value);

guint64 scanner1_get_update_id (Scanner1 *object);
void scanner1_set_update_id (Scanner1 *object, guint64 value);

GVariant *scanner1_get_categories (Scanner1 *object);
GVariant *scanner1_dup_categories (Scanner1 *object);
void scanner1_set_categories (Scanner1 *object, GVariant *value);


/* ---- */

#define TYPE_SCANNER1_PROXY (scanner1_proxy_get_type ())
#define SCANNER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SCANNER1_PROXY, Scanner1Proxy))
#define SCANNER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SCANNER1_PROXY, Scanner1ProxyClass))
#define SCANNER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SCANNER1_PROXY, Scanner1ProxyClass))
#define IS_SCANNER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SCANNER1_PROXY))
#define IS_SCANNER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SCANNER1_PROXY))

typedef struct _Scanner1Proxy Scanner1Proxy;
typedef struct _Scanner1ProxyClass Scanner1ProxyClass;
typedef struct _Scanner1ProxyPrivate Scanner1ProxyPrivate;

struct _Scanner1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Scanner1ProxyPrivate *priv;
};

struct _Scanner1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType scanner1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Scanner1Proxy, g_object_unref)
#endif

void scanner1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Scanner1 *scanner1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Scanner1 *scanner1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void scanner1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Scanner1 *scanner1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Scanner1 *scanner1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_SCANNER1_SKELETON (scanner1_skeleton_get_type ())
#define SCANNER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_SCANNER1_SKELETON, Scanner1Skeleton))
#define SCANNER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_SCANNER1_SKELETON, Scanner1SkeletonClass))
#define SCANNER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_SCANNER1_SKELETON, Scanner1SkeletonClass))
#define IS_SCANNER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_SCANNER1_SKELETON))
#define IS_SCANNER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_SCANNER1_SKELETON))

typedef struct _Scanner1Skeleton Scanner1Skeleton;
typedef struct _Scanner1SkeletonClass Scanner1SkeletonClass;
typedef struct _Scanner1SkeletonPrivate Scanner1SkeletonPrivate;

struct _Scanner1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Scanner1SkeletonPrivate *priv;
};

struct _Scanner1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType scanner1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Scanner1Skeleton, g_object_unref)
#endif

Scanner1 *scanner1_skeleton_new (void);


G_END_DECLS

#endif /* __LIGHTMEDIASCANNER_INTERFACE_H__ */
