/*
 * Generated by gdbus-codegen 2.50.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __OBEX_SESSION1_INTERFACE_H__
#define __OBEX_SESSION1_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.obex.Session1 */

#define TYPE_ORG_BLUEZ_OBEX_SESSION1 (org_bluez_obex_session1_get_type ())
#define ORG_BLUEZ_OBEX_SESSION1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1, OrgBluezObexSession1))
#define IS_ORG_BLUEZ_OBEX_SESSION1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1))
#define ORG_BLUEZ_OBEX_SESSION1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1, OrgBluezObexSession1Iface))

struct _OrgBluezObexSession1;
typedef struct _OrgBluezObexSession1 OrgBluezObexSession1;
typedef struct _OrgBluezObexSession1Iface OrgBluezObexSession1Iface;

struct _OrgBluezObexSession1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_capabilities) (
    OrgBluezObexSession1 *object,
    GDBusMethodInvocation *invocation);

  guchar  (*get_channel) (OrgBluezObexSession1 *object);

  const gchar * (*get_destination) (OrgBluezObexSession1 *object);

  const gchar * (*get_source) (OrgBluezObexSession1 *object);

  const gchar * (*get_target) (OrgBluezObexSession1 *object);

};

GType org_bluez_obex_session1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_obex_session1_interface_info (void);
guint org_bluez_obex_session1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_obex_session1_complete_get_capabilities (
    OrgBluezObexSession1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *capabilities);



/* D-Bus method calls: */
void org_bluez_obex_session1_call_get_capabilities (
    OrgBluezObexSession1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_obex_session1_call_get_capabilities_finish (
    OrgBluezObexSession1 *proxy,
    gchar **out_capabilities,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_obex_session1_call_get_capabilities_sync (
    OrgBluezObexSession1 *proxy,
    gchar **out_capabilities,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_bluez_obex_session1_get_source (OrgBluezObexSession1 *object);
gchar *org_bluez_obex_session1_dup_source (OrgBluezObexSession1 *object);
void org_bluez_obex_session1_set_source (OrgBluezObexSession1 *object, const gchar *value);

const gchar *org_bluez_obex_session1_get_destination (OrgBluezObexSession1 *object);
gchar *org_bluez_obex_session1_dup_destination (OrgBluezObexSession1 *object);
void org_bluez_obex_session1_set_destination (OrgBluezObexSession1 *object, const gchar *value);

guchar org_bluez_obex_session1_get_channel (OrgBluezObexSession1 *object);
void org_bluez_obex_session1_set_channel (OrgBluezObexSession1 *object, guchar value);

const gchar *org_bluez_obex_session1_get_target (OrgBluezObexSession1 *object);
gchar *org_bluez_obex_session1_dup_target (OrgBluezObexSession1 *object);
void org_bluez_obex_session1_set_target (OrgBluezObexSession1 *object, const gchar *value);


/* ---- */

#define TYPE_ORG_BLUEZ_OBEX_SESSION1_PROXY (org_bluez_obex_session1_proxy_get_type ())
#define ORG_BLUEZ_OBEX_SESSION1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1_PROXY, OrgBluezObexSession1Proxy))
#define ORG_BLUEZ_OBEX_SESSION1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_OBEX_SESSION1_PROXY, OrgBluezObexSession1ProxyClass))
#define ORG_BLUEZ_OBEX_SESSION1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1_PROXY, OrgBluezObexSession1ProxyClass))
#define IS_ORG_BLUEZ_OBEX_SESSION1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1_PROXY))
#define IS_ORG_BLUEZ_OBEX_SESSION1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_OBEX_SESSION1_PROXY))

typedef struct _OrgBluezObexSession1Proxy OrgBluezObexSession1Proxy;
typedef struct _OrgBluezObexSession1ProxyClass OrgBluezObexSession1ProxyClass;
typedef struct _OrgBluezObexSession1ProxyPrivate OrgBluezObexSession1ProxyPrivate;

struct _OrgBluezObexSession1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezObexSession1ProxyPrivate *priv;
};

struct _OrgBluezObexSession1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_obex_session1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezObexSession1Proxy, g_object_unref)
#endif

void org_bluez_obex_session1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezObexSession1 *org_bluez_obex_session1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezObexSession1 *org_bluez_obex_session1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_obex_session1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezObexSession1 *org_bluez_obex_session1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezObexSession1 *org_bluez_obex_session1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_OBEX_SESSION1_SKELETON (org_bluez_obex_session1_skeleton_get_type ())
#define ORG_BLUEZ_OBEX_SESSION1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1_SKELETON, OrgBluezObexSession1Skeleton))
#define ORG_BLUEZ_OBEX_SESSION1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_OBEX_SESSION1_SKELETON, OrgBluezObexSession1SkeletonClass))
#define ORG_BLUEZ_OBEX_SESSION1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1_SKELETON, OrgBluezObexSession1SkeletonClass))
#define IS_ORG_BLUEZ_OBEX_SESSION1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_OBEX_SESSION1_SKELETON))
#define IS_ORG_BLUEZ_OBEX_SESSION1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_OBEX_SESSION1_SKELETON))

typedef struct _OrgBluezObexSession1Skeleton OrgBluezObexSession1Skeleton;
typedef struct _OrgBluezObexSession1SkeletonClass OrgBluezObexSession1SkeletonClass;
typedef struct _OrgBluezObexSession1SkeletonPrivate OrgBluezObexSession1SkeletonPrivate;

struct _OrgBluezObexSession1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezObexSession1SkeletonPrivate *priv;
};

struct _OrgBluezObexSession1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_obex_session1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezObexSession1Skeleton, g_object_unref)
#endif

OrgBluezObexSession1 *org_bluez_obex_session1_skeleton_new (void);


G_END_DECLS

#endif /* __OBEX_SESSION1_INTERFACE_H__ */
