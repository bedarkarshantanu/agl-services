/*
 * Generated by gdbus-codegen 2.50.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __FREEDESKTOP_DBUS_PROPERTIES_INTERFACE_H__
#define __FREEDESKTOP_DBUS_PROPERTIES_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (org_freedesktop_dbus_properties_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusProperties))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusPropertiesIface))

struct _OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusProperties OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusPropertiesIface OrgFreedesktopDBusPropertiesIface;

struct _OrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name);

  gboolean (*handle_get_all) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name);

  gboolean (*handle_set) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value);

  void (*properties_changed) (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_properties_interface_info (void);
guint org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_properties_complete_get (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void org_freedesktop_dbus_properties_complete_get_all (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);

void org_freedesktop_dbus_properties_complete_set (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_freedesktop_dbus_properties_emit_properties_changed (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface_name,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void org_freedesktop_dbus_properties_call_get (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_get_all (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_all_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_all_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_set (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_set_finish (
    OrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_set_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (org_freedesktop_dbus_properties_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxy))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _OrgFreedesktopDBusPropertiesProxy OrgFreedesktopDBusPropertiesProxy;
typedef struct _OrgFreedesktopDBusPropertiesProxyClass OrgFreedesktopDBusPropertiesProxyClass;
typedef struct _OrgFreedesktopDBusPropertiesProxyPrivate OrgFreedesktopDBusPropertiesProxyPrivate;

struct _OrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (org_freedesktop_dbus_properties_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeleton))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _OrgFreedesktopDBusPropertiesSkeleton OrgFreedesktopDBusPropertiesSkeleton;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonClass OrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonPrivate OrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _OrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_skeleton_new (void);


G_END_DECLS

#endif /* __FREEDESKTOP_DBUS_PROPERTIES_INTERFACE_H__ */
