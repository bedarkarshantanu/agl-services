/*
 * Generated by gdbus-codegen 2.50.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __OBEX_CLIENT1_INTERFACE_H__
#define __OBEX_CLIENT1_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.obex.Client1 */

#define TYPE_ORG_BLUEZ_OBEX_CLIENT1 (org_bluez_obex_client1_get_type ())
#define ORG_BLUEZ_OBEX_CLIENT1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1, OrgBluezObexClient1))
#define IS_ORG_BLUEZ_OBEX_CLIENT1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1))
#define ORG_BLUEZ_OBEX_CLIENT1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1, OrgBluezObexClient1Iface))

struct _OrgBluezObexClient1;
typedef struct _OrgBluezObexClient1 OrgBluezObexClient1;
typedef struct _OrgBluezObexClient1Iface OrgBluezObexClient1Iface;

struct _OrgBluezObexClient1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_create_session) (
    OrgBluezObexClient1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_destination,
    GVariant *arg_args);

  gboolean (*handle_remove_session) (
    OrgBluezObexClient1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_session);

};

GType org_bluez_obex_client1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_obex_client1_interface_info (void);
guint org_bluez_obex_client1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_obex_client1_complete_create_session (
    OrgBluezObexClient1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *session);

void org_bluez_obex_client1_complete_remove_session (
    OrgBluezObexClient1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_obex_client1_call_create_session (
    OrgBluezObexClient1 *proxy,
    const gchar *arg_destination,
    GVariant *arg_args,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_obex_client1_call_create_session_finish (
    OrgBluezObexClient1 *proxy,
    gchar **out_session,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_obex_client1_call_create_session_sync (
    OrgBluezObexClient1 *proxy,
    const gchar *arg_destination,
    GVariant *arg_args,
    gchar **out_session,
    GCancellable *cancellable,
    GError **error);

void org_bluez_obex_client1_call_remove_session (
    OrgBluezObexClient1 *proxy,
    const gchar *arg_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_obex_client1_call_remove_session_finish (
    OrgBluezObexClient1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_obex_client1_call_remove_session_sync (
    OrgBluezObexClient1 *proxy,
    const gchar *arg_session,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_OBEX_CLIENT1_PROXY (org_bluez_obex_client1_proxy_get_type ())
#define ORG_BLUEZ_OBEX_CLIENT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1_PROXY, OrgBluezObexClient1Proxy))
#define ORG_BLUEZ_OBEX_CLIENT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_OBEX_CLIENT1_PROXY, OrgBluezObexClient1ProxyClass))
#define ORG_BLUEZ_OBEX_CLIENT1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1_PROXY, OrgBluezObexClient1ProxyClass))
#define IS_ORG_BLUEZ_OBEX_CLIENT1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1_PROXY))
#define IS_ORG_BLUEZ_OBEX_CLIENT1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_OBEX_CLIENT1_PROXY))

typedef struct _OrgBluezObexClient1Proxy OrgBluezObexClient1Proxy;
typedef struct _OrgBluezObexClient1ProxyClass OrgBluezObexClient1ProxyClass;
typedef struct _OrgBluezObexClient1ProxyPrivate OrgBluezObexClient1ProxyPrivate;

struct _OrgBluezObexClient1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezObexClient1ProxyPrivate *priv;
};

struct _OrgBluezObexClient1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_obex_client1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezObexClient1Proxy, g_object_unref)
#endif

void org_bluez_obex_client1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezObexClient1 *org_bluez_obex_client1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezObexClient1 *org_bluez_obex_client1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_obex_client1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezObexClient1 *org_bluez_obex_client1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezObexClient1 *org_bluez_obex_client1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_OBEX_CLIENT1_SKELETON (org_bluez_obex_client1_skeleton_get_type ())
#define ORG_BLUEZ_OBEX_CLIENT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1_SKELETON, OrgBluezObexClient1Skeleton))
#define ORG_BLUEZ_OBEX_CLIENT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_OBEX_CLIENT1_SKELETON, OrgBluezObexClient1SkeletonClass))
#define ORG_BLUEZ_OBEX_CLIENT1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1_SKELETON, OrgBluezObexClient1SkeletonClass))
#define IS_ORG_BLUEZ_OBEX_CLIENT1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_OBEX_CLIENT1_SKELETON))
#define IS_ORG_BLUEZ_OBEX_CLIENT1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_OBEX_CLIENT1_SKELETON))

typedef struct _OrgBluezObexClient1Skeleton OrgBluezObexClient1Skeleton;
typedef struct _OrgBluezObexClient1SkeletonClass OrgBluezObexClient1SkeletonClass;
typedef struct _OrgBluezObexClient1SkeletonPrivate OrgBluezObexClient1SkeletonPrivate;

struct _OrgBluezObexClient1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezObexClient1SkeletonPrivate *priv;
};

struct _OrgBluezObexClient1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_obex_client1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezObexClient1Skeleton, g_object_unref)
#endif

OrgBluezObexClient1 *org_bluez_obex_client1_skeleton_new (void);


/* ---- */

#define TYPE_OBJECT (object_get_type ())
#define OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT, Object))
#define IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT))
#define OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_OBJECT, Object))

struct _Object;
typedef struct _Object Object;
typedef struct _ObjectIface ObjectIface;

struct _ObjectIface
{
  GTypeInterface parent_iface;
};

GType object_get_type (void) G_GNUC_CONST;

OrgBluezObexClient1 *object_get_org_bluez_obex_client1 (Object *object);
OrgBluezObexClient1 *object_peek_org_bluez_obex_client1 (Object *object);

#define TYPE_OBJECT_PROXY (object_proxy_get_type ())
#define OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_PROXY, ObjectProxy))
#define OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_PROXY))
#define IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_PROXY))

typedef struct _ObjectProxy ObjectProxy;
typedef struct _ObjectProxyClass ObjectProxyClass;
typedef struct _ObjectProxyPrivate ObjectProxyPrivate;

struct _ObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  ObjectProxyPrivate *priv;
};

struct _ObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectProxy, g_object_unref)
#endif

ObjectProxy *object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define TYPE_OBJECT_SKELETON (object_skeleton_get_type ())
#define OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_SKELETON, ObjectSkeleton))
#define OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_SKELETON))
#define IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_SKELETON))

typedef struct _ObjectSkeleton ObjectSkeleton;
typedef struct _ObjectSkeletonClass ObjectSkeletonClass;
typedef struct _ObjectSkeletonPrivate ObjectSkeletonPrivate;

struct _ObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  ObjectSkeletonPrivate *priv;
};

struct _ObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectSkeleton, g_object_unref)
#endif

ObjectSkeleton *object_skeleton_new (const gchar *object_path);
void object_skeleton_set_org_bluez_obex_client1 (ObjectSkeleton *object, OrgBluezObexClient1 *interface_);

/* ---- */

#define TYPE_OBJECT_MANAGER_CLIENT (object_manager_client_get_type ())
#define OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClient))
#define OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_MANAGER_CLIENT))
#define IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _ObjectManagerClient ObjectManagerClient;
typedef struct _ObjectManagerClientClass ObjectManagerClientClass;
typedef struct _ObjectManagerClientPrivate ObjectManagerClientPrivate;

struct _ObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  ObjectManagerClientPrivate *priv;
};

struct _ObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectManagerClient, g_object_unref)
#endif

GType object_manager_client_get_type (void) G_GNUC_CONST;

GType object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __OBEX_CLIENT1_INTERFACE_H__ */
